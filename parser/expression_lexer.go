// Generated from /home/jsantos/projects/aure-api/src/github.com/jamillosantos/go-expressions/antlr/Expression.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)
// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter


var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 26, 176, 
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 3, 2, 3, 2, 
	3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 
	3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 
	13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 
	3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 
	21, 7, 21, 112, 10, 21, 12, 21, 14, 21, 115, 11, 21, 3, 22, 3, 22, 3, 22, 
	7, 22, 120, 10, 22, 12, 22, 14, 22, 123, 11, 22, 3, 22, 3, 22, 3, 23, 3, 
	23, 3, 24, 3, 24, 3, 24, 3, 25, 5, 25, 133, 10, 25, 3, 26, 3, 26, 5, 26, 
	137, 10, 26, 3, 27, 3, 27, 3, 27, 5, 27, 142, 10, 27, 3, 27, 5, 27, 145, 
	10, 27, 3, 27, 3, 27, 5, 27, 149, 10, 27, 3, 28, 6, 28, 152, 10, 28, 13, 
	28, 14, 28, 153, 3, 28, 3, 28, 6, 28, 158, 10, 28, 13, 28, 14, 28, 159, 
	5, 28, 162, 10, 28, 3, 29, 3, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 32, 6, 
	32, 171, 10, 32, 13, 32, 14, 32, 172, 3, 32, 3, 32, 3, 121, 2, 33, 3, 3, 
	5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 
	25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 
	43, 23, 45, 24, 47, 2, 49, 2, 51, 2, 53, 25, 55, 2, 57, 2, 59, 2, 61, 2, 
	63, 26, 3, 2, 6, 4, 2, 12, 12, 15, 15, 5, 2, 67, 92, 97, 97, 99, 124, 4, 
	2, 45, 45, 47, 47, 5, 2, 11, 12, 15, 15, 34, 34, 2, 179, 2, 3, 3, 2, 2, 
	2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 
	2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 
	2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 
	2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 
	3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 
	43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 53, 3, 2, 2, 2, 2, 63, 3, 2, 2, 2, 
	3, 65, 3, 2, 2, 2, 5, 67, 3, 2, 2, 2, 7, 69, 3, 2, 2, 2, 9, 71, 3, 2, 2, 
	2, 11, 73, 3, 2, 2, 2, 13, 75, 3, 2, 2, 2, 15, 77, 3, 2, 2, 2, 17, 79, 
	3, 2, 2, 2, 19, 81, 3, 2, 2, 2, 21, 83, 3, 2, 2, 2, 23, 86, 3, 2, 2, 2, 
	25, 89, 3, 2, 2, 2, 27, 92, 3, 2, 2, 2, 29, 96, 3, 2, 2, 2, 31, 98, 3, 
	2, 2, 2, 33, 100, 3, 2, 2, 2, 35, 102, 3, 2, 2, 2, 37, 105, 3, 2, 2, 2, 
	39, 107, 3, 2, 2, 2, 41, 109, 3, 2, 2, 2, 43, 116, 3, 2, 2, 2, 45, 126, 
	3, 2, 2, 2, 47, 128, 3, 2, 2, 2, 49, 132, 3, 2, 2, 2, 51, 136, 3, 2, 2, 
	2, 53, 138, 3, 2, 2, 2, 55, 151, 3, 2, 2, 2, 57, 163, 3, 2, 2, 2, 59, 165, 
	3, 2, 2, 2, 61, 167, 3, 2, 2, 2, 63, 170, 3, 2, 2, 2, 65, 66, 7, 42, 2, 
	2, 66, 4, 3, 2, 2, 2, 67, 68, 7, 43, 2, 2, 68, 6, 3, 2, 2, 2, 69, 70, 7, 
	45, 2, 2, 70, 8, 3, 2, 2, 2, 71, 72, 7, 47, 2, 2, 72, 10, 3, 2, 2, 2, 73, 
	74, 7, 44, 2, 2, 74, 12, 3, 2, 2, 2, 75, 76, 7, 49, 2, 2, 76, 14, 3, 2, 
	2, 2, 77, 78, 7, 39, 2, 2, 78, 16, 3, 2, 2, 2, 79, 80, 7, 64, 2, 2, 80, 
	18, 3, 2, 2, 2, 81, 82, 7, 62, 2, 2, 82, 20, 3, 2, 2, 2, 83, 84, 7, 63, 
	2, 2, 84, 85, 7, 63, 2, 2, 85, 22, 3, 2, 2, 2, 86, 87, 7, 126, 2, 2, 87, 
	88, 7, 126, 2, 2, 88, 24, 3, 2, 2, 2, 89, 90, 7, 40, 2, 2, 90, 91, 7, 40, 
	2, 2, 91, 26, 3, 2, 2, 2, 92, 93, 7, 122, 2, 2, 93, 94, 7, 113, 2, 2, 94, 
	95, 7, 116, 2, 2, 95, 28, 3, 2, 2, 2, 96, 97, 7, 46, 2, 2, 97, 30, 3, 2, 
	2, 2, 98, 99, 7, 48, 2, 2, 99, 32, 3, 2, 2, 2, 100, 101, 7, 96, 2, 2, 101, 
	34, 3, 2, 2, 2, 102, 103, 7, 114, 2, 2, 103, 104, 7, 107, 2, 2, 104, 36, 
	3, 2, 2, 2, 105, 106, 5, 59, 30, 2, 106, 38, 3, 2, 2, 2, 107, 108, 7, 107, 
	2, 2, 108, 40, 3, 2, 2, 2, 109, 113, 5, 49, 25, 2, 110, 112, 5, 51, 26, 
	2, 111, 110, 3, 2, 2, 2, 112, 115, 3, 2, 2, 2, 113, 111, 3, 2, 2, 2, 113, 
	114, 3, 2, 2, 2, 114, 42, 3, 2, 2, 2, 115, 113, 3, 2, 2, 2, 116, 121, 5, 
	45, 23, 2, 117, 120, 5, 47, 24, 2, 118, 120, 10, 2, 2, 2, 119, 117, 3, 
	2, 2, 2, 119, 118, 3, 2, 2, 2, 120, 123, 3, 2, 2, 2, 121, 122, 3, 2, 2, 
	2, 121, 119, 3, 2, 2, 2, 122, 124, 3, 2, 2, 2, 123, 121, 3, 2, 2, 2, 124, 
	125, 5, 45, 23, 2, 125, 44, 3, 2, 2, 2, 126, 127, 7, 36, 2, 2, 127, 46, 
	3, 2, 2, 2, 128, 129, 7, 94, 2, 2, 129, 130, 7, 36, 2, 2, 130, 48, 3, 2, 
	2, 2, 131, 133, 9, 3, 2, 2, 132, 131, 3, 2, 2, 2, 133, 50, 3, 2, 2, 2, 
	134, 137, 5, 49, 25, 2, 135, 137, 4, 50, 59, 2, 136, 134, 3, 2, 2, 2, 136, 
	135, 3, 2, 2, 2, 137, 52, 3, 2, 2, 2, 138, 148, 5, 55, 28, 2, 139, 142, 
	5, 57, 29, 2, 140, 142, 5, 59, 30, 2, 141, 139, 3, 2, 2, 2, 141, 140, 3, 
	2, 2, 2, 142, 144, 3, 2, 2, 2, 143, 145, 5, 61, 31, 2, 144, 143, 3, 2, 
	2, 2, 144, 145, 3, 2, 2, 2, 145, 146, 3, 2, 2, 2, 146, 147, 5, 55, 28, 
	2, 147, 149, 3, 2, 2, 2, 148, 141, 3, 2, 2, 2, 148, 149, 3, 2, 2, 2, 149, 
	54, 3, 2, 2, 2, 150, 152, 4, 50, 59, 2, 151, 150, 3, 2, 2, 2, 152, 153, 
	3, 2, 2, 2, 153, 151, 3, 2, 2, 2, 153, 154, 3, 2, 2, 2, 154, 161, 3, 2, 
	2, 2, 155, 157, 7, 48, 2, 2, 156, 158, 4, 50, 59, 2, 157, 156, 3, 2, 2, 
	2, 158, 159, 3, 2, 2, 2, 159, 157, 3, 2, 2, 2, 159, 160, 3, 2, 2, 2, 160, 
	162, 3, 2, 2, 2, 161, 155, 3, 2, 2, 2, 161, 162, 3, 2, 2, 2, 162, 56, 3, 
	2, 2, 2, 163, 164, 7, 71, 2, 2, 164, 58, 3, 2, 2, 2, 165, 166, 7, 103, 
	2, 2, 166, 60, 3, 2, 2, 2, 167, 168, 9, 4, 2, 2, 168, 62, 3, 2, 2, 2, 169, 
	171, 9, 5, 2, 2, 170, 169, 3, 2, 2, 2, 171, 172, 3, 2, 2, 2, 172, 170, 
	3, 2, 2, 2, 172, 173, 3, 2, 2, 2, 173, 174, 3, 2, 2, 2, 174, 175, 8, 32, 
	2, 2, 175, 64, 3, 2, 2, 2, 15, 2, 113, 119, 121, 132, 136, 141, 144, 148, 
	153, 159, 161, 172, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", "'=='", 
	"'||'", "'&&'", "'xor'", "','", "'.'", "'^'", "'pi'", "", "'i'", "", "", 
	"'\"'",
}

var lexerSymbolicNames = []string{
	"", "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "MOD", "GT", "LT", 
	"EQ", "OR", "AND", "XOR", "COMMA", "POINT", "POW", "PI", "EULER", "I", 
	"VARIABLE", "QUOTED_STRING", "QUOTE", "SCIENTIFIC_NUMBER", "WS",
}

var lexerRuleNames = []string{
	"LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "MOD", "GT", "LT", 
	"EQ", "OR", "AND", "XOR", "COMMA", "POINT", "POW", "PI", "EULER", "I", 
	"VARIABLE", "QUOTED_STRING", "QUOTE", "ESCAPED_QUOTE", "VALID_ID_START", 
	"VALID_ID_CHAR", "SCIENTIFIC_NUMBER", "NUMBER", "E1", "E2", "SIGN", "WS",
}

type ExpressionLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewExpressionLexer(input antlr.CharStream) *ExpressionLexer {

	l := new(ExpressionLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Expression.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ExpressionLexer tokens.
const (
	ExpressionLexerLPAREN = 1
	ExpressionLexerRPAREN = 2
	ExpressionLexerPLUS = 3
	ExpressionLexerMINUS = 4
	ExpressionLexerTIMES = 5
	ExpressionLexerDIV = 6
	ExpressionLexerMOD = 7
	ExpressionLexerGT = 8
	ExpressionLexerLT = 9
	ExpressionLexerEQ = 10
	ExpressionLexerOR = 11
	ExpressionLexerAND = 12
	ExpressionLexerXOR = 13
	ExpressionLexerCOMMA = 14
	ExpressionLexerPOINT = 15
	ExpressionLexerPOW = 16
	ExpressionLexerPI = 17
	ExpressionLexerEULER = 18
	ExpressionLexerI = 19
	ExpressionLexerVARIABLE = 20
	ExpressionLexerQUOTED_STRING = 21
	ExpressionLexerQUOTE = 22
	ExpressionLexerSCIENTIFIC_NUMBER = 23
	ExpressionLexerWS = 24
)

